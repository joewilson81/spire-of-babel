#!/usr/bin/env node

'use strict';

let fs = require('fs');

let chalk = require('chalk');

let spire = require('../lib/spire-of-babel');

function displayHelp() {

    process.stdout.write('\n');
    process.stdout.write(chalk.blue(' Usage:') + ' spire-of-babel <path> [options]' + '\n\n');
    process.stdout.write(' Options:' + '\n\n');
    process.stdout.write(chalk.yellow('  -h, --help') + '\t\tDisplay this help message.' + '\n');
    process.stdout.write(chalk.yellow('  -v, --version') + '\t\tDisplay the current installed version.' + '\n');
    process.stdout.write(chalk.yellow('  -b, --bundle') + '\t\tUse browserify bundler.' + '\n');
    process.stdout.write(chalk.yellow('  -o, --output') + '\t\tPath to save transformed file to. Defaults to stdout.' + '\n');
    process.stdout.write(chalk.yellow('  -w, --watch') + '\t\tFile path to watch for changes. Value must be in quotes. Example: "./test/*.jsx"' + '\n');
    process.exit();

}

function transform(input, options) {

    spire.transformFile(input, options).then(function (result) {

        if (options.output) {

            fs.writeFile(options.output, result, 'utf8');

        } else {

            process.stdout.write(`${result}`);

        }

    }).catch(function (err) {

        console.error(err);

    });
}

let input;

let options = {
    bundle: false,
    output: null,
    watch: null
};

let args = process.argv.slice(2);

if (args.length && !args[0].match(/^\-/)) {

    input = args.shift();

}

while (args.length) {

    switch (args.shift()) {

    case '-b':
    case '--bundle':

        options.bundle = true;

        break;

    case '-o':
    case '--output':

        options.output = args.shift();

        break;

    case '-w':
    case '--watch':

        options.watch = spire.parseWatchPath(args.shift());

        break;

    case '-v':
    case '--version':

        process.stdout.write(require('../package').version + '\n');
        process.exit();

        break;

    default:

        displayHelp();

        break;

    }

}

if (input) {

    if (options.watch) {

        fs.watch(options.watch.directory, {
            recursive: options.watch.recursive
        }, function (event, filename) {

            if (event === 'change' && filename.match(options.watch.filename)) {

                if (options.output) {

                    console.log(chalk.yellow('File changed: ') + filename);
                    console.log(chalk.green('Transformed: ') + input);

                }

                transform(input, options);

            }

        });

    } else {

        transform(input, options);

    }

} else {

    displayHelp();

}
